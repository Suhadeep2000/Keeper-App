{"ast":null,"code":"import * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport useButton from '../useButton';\nimport { useListItem } from '../useList';\nimport { useCompoundItem } from '../utils/useCompoundItem';\n\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Menu](https://mui.com/base/react-menu/#hooks)\r\n *\r\n * API:\r\n *\r\n * - [useMenuItem API](https://mui.com/base/react-menu/hooks-api/#use-menu-item)\r\n */\nexport default function useMenuItem(params) {\n  const {\n    disabled = false,\n    id: idParam,\n    rootRef: externalRef,\n    label\n  } = params;\n  const id = useId(idParam);\n  const itemRef = React.useRef(null);\n  const itemMetadata = React.useMemo(() => ({\n    disabled,\n    id: id != null ? id : '',\n    label,\n    ref: itemRef\n  }), [disabled, id, label]);\n  const {\n    getRootProps: getListRootProps,\n    highlighted,\n    rootRef: listItemRefHandler\n  } = useListItem({\n    item: id\n  });\n  const {\n    index,\n    totalItemCount\n  } = useCompoundItem(id, itemMetadata);\n  const {\n    getRootProps: getButtonProps,\n    focusVisible,\n    rootRef: buttonRefHandler\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: true\n  });\n  const handleRef = useForkRef(listItemRefHandler, buttonRefHandler, externalRef, itemRef);\n  React.useDebugValue({\n    id,\n    highlighted,\n    disabled,\n    label\n  });\n\n  // If `id` is undefined (during SSR in React < 18), we fall back to rendering a simplified menu item\n  // which does not have access to infortmation about its position or highlighted state.\n  if (id === undefined) {\n    return {\n      getRootProps: function () {\n        let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return {\n          ...otherHandlers,\n          ...getButtonProps(otherHandlers),\n          role: 'menuitem'\n        };\n      },\n      disabled: false,\n      focusVisible,\n      highlighted: false,\n      index: -1,\n      totalItemCount: 0,\n      rootRef: handleRef\n    };\n  }\n  const getRootProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const resolvedButtonProps = {\n      ...otherHandlers,\n      ...getButtonProps(otherHandlers)\n    };\n    const resolvedMenuItemProps = {\n      ...resolvedButtonProps,\n      ...getListRootProps(resolvedButtonProps)\n    };\n    return {\n      ...otherHandlers,\n      ...resolvedButtonProps,\n      ...resolvedMenuItemProps,\n      role: 'menuitem',\n      ref: handleRef\n    };\n  };\n  return {\n    getRootProps,\n    disabled,\n    focusVisible,\n    highlighted,\n    index,\n    totalItemCount,\n    rootRef: handleRef\n  };\n}","map":{"version":3,"names":["React","unstable_useId","useId","unstable_useForkRef","useForkRef","useButton","useListItem","useCompoundItem","useMenuItem","params","disabled","id","idParam","rootRef","externalRef","label","itemRef","useRef","itemMetadata","useMemo","ref","getRootProps","getListRootProps","highlighted","listItemRefHandler","item","index","totalItemCount","getButtonProps","focusVisible","buttonRefHandler","focusableWhenDisabled","handleRef","useDebugValue","undefined","otherHandlers","arguments","length","role","resolvedButtonProps","resolvedMenuItemProps"],"sources":["C:/Users/hp/Desktop/keeper-app/node_modules/@mui/base/useMenuItem/useMenuItem.js"],"sourcesContent":["import * as React from 'react';\r\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\r\nimport useButton from '../useButton';\r\nimport { useListItem } from '../useList';\r\nimport { useCompoundItem } from '../utils/useCompoundItem';\r\n\r\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Menu](https://mui.com/base/react-menu/#hooks)\r\n *\r\n * API:\r\n *\r\n * - [useMenuItem API](https://mui.com/base/react-menu/hooks-api/#use-menu-item)\r\n */\r\nexport default function useMenuItem(params) {\r\n  const {\r\n    disabled = false,\r\n    id: idParam,\r\n    rootRef: externalRef,\r\n    label\r\n  } = params;\r\n  const id = useId(idParam);\r\n  const itemRef = React.useRef(null);\r\n  const itemMetadata = React.useMemo(() => ({\r\n    disabled,\r\n    id: id != null ? id : '',\r\n    label,\r\n    ref: itemRef\r\n  }), [disabled, id, label]);\r\n  const {\r\n    getRootProps: getListRootProps,\r\n    highlighted,\r\n    rootRef: listItemRefHandler\r\n  } = useListItem({\r\n    item: id\r\n  });\r\n  const {\r\n    index,\r\n    totalItemCount\r\n  } = useCompoundItem(id, itemMetadata);\r\n  const {\r\n    getRootProps: getButtonProps,\r\n    focusVisible,\r\n    rootRef: buttonRefHandler\r\n  } = useButton({\r\n    disabled,\r\n    focusableWhenDisabled: true\r\n  });\r\n  const handleRef = useForkRef(listItemRefHandler, buttonRefHandler, externalRef, itemRef);\r\n  React.useDebugValue({\r\n    id,\r\n    highlighted,\r\n    disabled,\r\n    label\r\n  });\r\n\r\n  // If `id` is undefined (during SSR in React < 18), we fall back to rendering a simplified menu item\r\n  // which does not have access to infortmation about its position or highlighted state.\r\n  if (id === undefined) {\r\n    return {\r\n      getRootProps: (otherHandlers = {}) => ({\r\n        ...otherHandlers,\r\n        ...getButtonProps(otherHandlers),\r\n        role: 'menuitem'\r\n      }),\r\n      disabled: false,\r\n      focusVisible,\r\n      highlighted: false,\r\n      index: -1,\r\n      totalItemCount: 0,\r\n      rootRef: handleRef\r\n    };\r\n  }\r\n  const getRootProps = (otherHandlers = {}) => {\r\n    const resolvedButtonProps = {\r\n      ...otherHandlers,\r\n      ...getButtonProps(otherHandlers)\r\n    };\r\n    const resolvedMenuItemProps = {\r\n      ...resolvedButtonProps,\r\n      ...getListRootProps(resolvedButtonProps)\r\n    };\r\n    return {\r\n      ...otherHandlers,\r\n      ...resolvedButtonProps,\r\n      ...resolvedMenuItemProps,\r\n      role: 'menuitem',\r\n      ref: handleRef\r\n    };\r\n  };\r\n  return {\r\n    getRootProps,\r\n    disabled,\r\n    focusVisible,\r\n    highlighted,\r\n    index,\r\n    totalItemCount,\r\n    rootRef: handleRef\r\n  };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}